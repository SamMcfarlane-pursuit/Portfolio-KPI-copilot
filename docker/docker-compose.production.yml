# Production Docker Compose Configuration
# Complete production stack with monitoring and security

version: '3.8'

services:
  # Main Application
  portfolio-kpi-copilot:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    container_name: portfolio-kpi-copilot-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=https://your-domain.com
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - DATABASE_URL=file:./data/portfolio.db
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_BASE_URL=http://ollama:11434
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    networks:
      - portfolio_network
    depends_on:
      - ollama
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Local AI Service (Ollama)
  ollama:
    image: ollama/ollama:latest
    container_name: portfolio-ollama-prod
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - portfolio_network
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - portfolio_network
    depends_on:
      - portfolio-kpi-copilot
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - portfolio_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - portfolio_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: portfolio-loki-prod
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - portfolio_network
    command: -config.file=/etc/loki/local-config.yaml

  # Log Collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: portfolio-promtail-prod
    restart: unless-stopped
    volumes:
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - portfolio_network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

  # Backup Service
  backup:
    image: alpine:latest
    container_name: portfolio-backup-prod
    restart: "no"
    volumes:
      - app_data:/backup/app_data:ro
      - redis_data:/backup/redis_data:ro
      - ollama_data:/backup/ollama_data:ro
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - portfolio_network
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: sh -c "apk add --no-cache aws-cli && crond -f"

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  portfolio_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
