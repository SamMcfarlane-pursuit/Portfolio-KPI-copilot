// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management & Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  role          String    @default("ANALYST")
  department    String?
  title         String?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime? // Track last login for security
  loginAttempts Int       @default(0) // Track failed login attempts
  lockedUntil   DateTime? // Account lockout for security
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  organizationUser OrganizationUser[]
  queries          Query[]
  documents        Document[]
  alerts           Alert[]
  auditLogs        AuditLog[]

  // CRUD tracking relations
  createdPortfolios Portfolio[] @relation("CreatedBy")
  updatedPortfolios Portfolio[] @relation("UpdatedBy")
  deletedPortfolios Portfolio[] @relation("DeletedBy")

  createdCompanies Company[] @relation("CreatedBy")
  updatedCompanies Company[] @relation("UpdatedBy")
  deletedCompanies Company[] @relation("DeletedBy")

  createdKPIs KPI[] @relation("CreatedBy")
  updatedKPIs KPI[] @relation("UpdatedBy")
  deletedKPIs KPI[] @relation("DeletedBy")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Organization & Access Control
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  settings    String?  // JSON as string for SQLite
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users     OrganizationUser[]
  funds     Fund[]
  documents Document[]
  kpis      KPI[]

  @@map("organizations")
}

model OrganizationUser {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   @default("VIEWER")
  permissions    String?  // JSON as string for SQLite
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_users")
}

// Portfolio Structure
model Fund {
  id             String   @id @default(cuid())
  name           String
  fundNumber     String?
  vintage        Int?
  strategy       String?
  status         String   @default("ACTIVE")
  totalSize      Float?
  currency       String   @default("USD")
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  portfolios   Portfolio[]
  kpis         KPI[]

  @@map("funds")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  sector      String?
  geography   String?
  status      String   @default("ACTIVE")
  investment  Float?
  ownership   Float?
  totalValue  Float?
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  fundId      String

  // CRUD tracking
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  deletedAt   DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fund Fund  @relation(fields: [fundId], references: [id], onDelete: Cascade)
  kpis KPI[]
  portfolioCompanies PortfolioCompany[]

  // CRUD relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("UpdatedBy", fields: [updatedBy], references: [id])
  deleter User? @relation("DeletedBy", fields: [deletedBy], references: [id])

  @@map("portfolios")
}

// Company Management
model Company {
  id          String   @id @default(cuid())
  name        String
  symbol      String   @unique
  sector      String?
  industry    String?
  marketCap   Float?
  description String?
  isActive    Boolean  @default(true)

  // CRUD tracking
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  deletedAt   DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  kpis        KPI[]
  portfolioCompanies PortfolioCompany[]

  // CRUD relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("UpdatedBy", fields: [updatedBy], references: [id])
  deleter User? @relation("DeletedBy", fields: [deletedBy], references: [id])

  @@map("companies")
}

// Portfolio-Company Junction Table
model PortfolioCompany {
  id          String @id @default(cuid())
  portfolioId String
  companyId   String
  createdAt   DateTime @default(now())

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, companyId])
  @@map("portfolio_companies")
}

// KPI & Data Management
model KPI {
  id           String    @id @default(cuid())
  name         String
  category     String
  subcategory  String?
  value        Float
  unit         String?
  period       DateTime
  periodType   String    @default("quarterly") // quarterly, monthly, annual
  currency     String?
  source       String?
  confidence   Float? // 0.00 to 1.00
  notes        String?
  description  String?
  targetValue  Float?
  isActive     Boolean   @default(true)
  metadata     String?  // JSON as string for SQLite
  fundId       String?
  portfolioId  String?
  companyId    String?
  organizationId String

  // CRUD tracking
  createdBy    String?
  updatedBy    String?
  deletedBy    String?
  deletedAt    DateTime?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  fund         Fund?        @relation(fields: [fundId], references: [id], onDelete: SetNull)
  portfolio    Portfolio?   @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  company      Company?     @relation(fields: [companyId], references: [id], onDelete: SetNull)

  // CRUD relations
  creator User? @relation("CreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("UpdatedBy", fields: [updatedBy], references: [id])
  deleter User? @relation("DeletedBy", fields: [deletedBy], references: [id])

  @@map("kpis")
}

// Document Management
model Document {
  id             String   @id @default(cuid())
  title          String
  filename       String
  fileType       String
  fileSize       Int
  filePath       String
  uploadedBy     String
  organizationId String
  status         String   @default("PROCESSING")
  extractedText  String?
  metadata       String?  // JSON as string for SQLite
  tags           String?  // Comma-separated tags for SQLite
  isEmbedded     Boolean  @default(false)
  embeddingId    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  uploader     User         @relation(fields: [uploadedBy], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// AI Query & Chat
model Query {
  id             String   @id @default(cuid())
  userId         String
  organizationId String?
  question       String
  response       String?
  context        String?  // JSON as string for SQLite
  sources        String?  // Comma-separated sources for SQLite
  status         String   @default("PROCESSING")
  processingTime Int?     // milliseconds
  tokens         Int?
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("queries")
}

// Alerts & Monitoring
model Alert {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  type        String
  severity    String    @default("INFO")
  condition   String    // Alert conditions and thresholds as JSON string
  isActive    Boolean   @default(true)
  lastTriggered DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

// Audit & Compliance
model AuditLog {
  id           String   @id @default(cuid())
  userId       String
  userEmail    String
  action       String   // CREATE, READ, UPDATE, DELETE
  entityType   String   // Type of entity (portfolio, company, kpi, etc.)
  entityId     String   // ID of the specific entity
  changes      String?  // JSON string of changes made
  timestamp    DateTime @default(now())
  ipAddress    String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([timestamp])
  @@index([action])
  @@map("audit_logs")
}

// Data Backup for Recovery
model DataBackup {
  id         String   @id @default(cuid())
  entityType String   // Type of entity backed up
  entityId   String   // ID of the entity backed up
  backupData String   // JSON string of the backed up data
  createdAt  DateTime @default(now())

  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@map("data_backups")
}
